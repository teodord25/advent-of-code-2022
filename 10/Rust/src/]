use std::fs;


fn part_1(input_str: &str) -> i64 {
    let total = 0;

    let mut register = 1;

    let mut current_cycle = 1;

    let lines: Vec<&str> = input_str.trim().split("\n").collect();
    let mut second_cycle = false;

    let i = 0;
    while i < lines.len() {
        let line = lines[i];
        let tokens: Vec<&str> = line.split(" ").collect();
        let op = line
        println!("curr {current_cycle}");

        match current_cycle {
            20|60|100|140|180|220 => println!("{current_cycle} X is {register}"),
            _ => {}
        }

        let tokens: Vec<&str> = line.split(" ").collect();

        if second_cycle {

            
        }


        if tokens[0] == "addx" {
            if !second_cycle {
                println!("bruh");
                second_cycle = true;
                current_cycle += 2;
                continue; 
            }

            current_cycle += 2;
            register += tokens[1].parse::<i32>().unwrap();
            second_cycle = false;
        } else {
            current_cycle += 1;
        }
    }
0
}

fn part_2(input_str: &str) -> i64 {
    let total = 0;



    total
}


fn main() {
    let input_str: String = String::from(fs::read_to_string("input.txt").expect("Unable to read input file."));

    if input_str.trim().len() == 0 {
        panic!("puzzle input string missing"); 
    }
    println!("{}", part_1(&input_str));
    println!("{}", part_2(&input_str));
}
